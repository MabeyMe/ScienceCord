<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ScienceCord</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- FontAwesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            background-color: #1e1f22;
            color: #d1d5db;
        }
        .chat-container {
            height: calc(100vh - 12rem);
            overflow-y: auto;
            scrollbar-width: thin;
            scrollbar-color: #4b5563 #1e1f22;
        }
        .chat-container::-webkit-scrollbar {
            width: 8px;
        }
        .chat-container::-webkit-scrollbar-thumb {
            background-color: #4b5563;
            border-radius: 4px;
        }
        .chat-container::-webkit-scrollbar-track {
            background-color: #1e1f22;
        }
    </style>
</head>
<body class="antialiased flex flex-col h-screen">

    <div class="flex items-center space-x-2 bg-[#2b2d31] p-4 text-white font-bold text-xl shadow-lg rounded-b-lg">
        <i class="fas fa-flask text-lg"></i>
        <span>ScienceCord</span>
    </div>

    <!-- Navigation Bar -->
    <div class="bg-[#1e1f22] text-white p-4 rounded-b-lg flex flex-col sm:flex-row justify-center items-center space-y-4 sm:space-y-0 sm:space-x-8 my-2">
        <button id="chat-tab" class="text-white hover:text-gray-300 font-bold transition-colors text-center">Chat</button>
        <button id="quiz-tab" class="text-white hover:text-gray-300 font-bold transition-colors text-center">Quiz</button>
        <a href="https://discord.gg/b4Y49ZhD5f" target="_blank" class="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-6 rounded-lg transition-colors shadow-lg">
            Connect & Join
        </a>
    </div>

    <!-- Main Content Area -->
    <div class="flex-grow flex flex-col">

        <!-- Chat Section -->
        <div id="chat-section" class="flex-grow flex flex-col">
            <div id="chat-messages" class="chat-container p-4 space-y-4 flex-grow">
                <!-- Messages will be injected here by JavaScript -->
                <div class="flex items-start">
                    <div class="flex-shrink-0 mr-3">
                        <i class="fas fa-robot text-blue-400 text-2xl"></i>
                    </div>
                    <div class="bg-[#383a40] p-4 rounded-lg shadow-md max-w-lg">
                        <p>Hello! I am the ScienceCord AI. How can I assist you with your scientific inquiries today?</p>
                    </div>
                </div>
            </div>
            
            <div class="p-4 bg-[#2b2d31] flex-shrink-0 rounded-t-lg">
                <div class="flex items-center space-x-4">
                    <!-- Image upload button -->
                    <label for="file-input" class="bg-gray-700 text-white rounded-lg p-3 hover:bg-gray-800 transition-colors cursor-pointer">
                        <i class="fas fa-image"></i>
                    </label>
                    <input type="file" id="file-input" class="hidden" accept="image/*">
                    <input type="text" id="user-input" placeholder="Ask a science question..."
                           class="flex-grow bg-[#40444b] text-gray-200 border-none rounded-lg p-3 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors">
                    <button id="send-btn" class="bg-blue-500 text-white rounded-lg p-3 hover:bg-blue-600 transition-colors cursor-pointer">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </div>
                <div id="image-preview" class="hidden mt-2 p-2 bg-[#40444b] rounded-lg">
                    <img id="preview-image" src="#" alt="Image Preview" class="max-h-32 rounded-lg">
                </div>
                <div id="loading-indicator" class="hidden text-center text-sm text-gray-400 mt-2">
                    Thinking...
                </div>
            </div>
        </div>

        <!-- Science Quiz Section -->
        <div id="quiz-section" class="p-4 bg-[#2b2d31] flex-col items-center justify-center rounded-lg my-4 hidden">
            <h2 class="text-xl font-bold text-white mb-2">Science Quiz</h2>
            <p id="quiz-intro" class="text-sm text-gray-400 text-center mb-4">Test your knowledge with a fun science quiz powered by AI!</p>
            
            <div id="quiz-options" class="flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-4 mb-4">
                <div>
                    <label for="quiz-difficulty" class="block text-sm font-medium text-gray-400 mb-1">Difficulty</label>
                    <select id="quiz-difficulty" class="w-full bg-[#40444b] text-white rounded-lg p-2 focus:outline-none focus:ring-2 focus:ring-purple-500">
                        <option value="easy">Easy</option>
                        <option value="medium" selected>Medium</option>
                        <option value="hard">Hard</option>
                    </select>
                </div>
                <div>
                    <label for="quiz-count" class="block text-sm font-medium text-gray-400 mb-1">Questions</label>
                    <select id="quiz-count" class="w-full bg-[#40444b] text-white rounded-lg p-2 focus:outline-none focus:ring-2 focus:ring-purple-500">
                        <option value="3">3</option>
                        <option value="5" selected>5</option>
                        <option value="10">10</option>
                        <option value="20">20</option>
                        <option value="30">30</option>
                    </select>
                </div>
                <div>
                    <label for="quiz-age" class="block text-sm font-medium text-gray-400 mb-1">Age Group</label>
                    <select id="quiz-age" class="w-full bg-[#40444b] text-white rounded-lg p-2 focus:outline-none focus:ring-2 focus:ring-purple-500">
                        <option value="5">5</option>
                        <option value="6">6</option>
                        <option value="7">7</option>
                        <option value="8">8</option>
                        <option value="9">9</option>
                        <option value="10">10</option>
                        <option value="11">11</option>
                        <option value="12">12</option>
                        <option value="13">13</option>
                        <option value="14" selected>14</option>
                        <option value="15">15</option>
                        <option value="16">16</option>
                        <option value="17">17</option>
                        <option value="18">18</option>
                        <option value="19">19</option>
                        <option value="20">20</option>
                        <option value="21">21</option>
                        <option value="22">22</option>
                        <option value="23">23</option>
                        <option value="24">24</option>
                        <option value="25">25</option>
                        <option value="26">26</option>
                        <option value="27">27</option>
                        <option value="28">28</option>
                        <option value="29">29</option>
                        <option value="30">30</option>
                        <option value="31">31</option>
                        <option value="32">32</option>
                        <option value="33">33</option>
                        <option value="34">34</option>
                        <option value="35">35</option>
                        <option value="36">36</option>
                        <option value="37">37</option>
                        <option value="38">38</option>
                        <option value="39">39</option>
                        <option value="40">40</option>
                        <option value="41">41</option>
                        <option value="42">42</option>
                        <option value="43">43</option>
                        <option value="44">44</option>
                        <option value="45">45</option>
                        <option value="46">46</option>
                        <option value="47">47</option>
                        <option value="48">48</option>
                        <option value="49">49</option>
                        <option value="50">50</option>
                        <option value="51">51</option>
                        <option value="52">52</option>
                        <option value="53">53</option>
                        <option value="54">54</option>
                        <option value="55">55</option>
                        <option value="56">56</option>
                        <option value="57">57</option>
                        <option value="58">58</option>
                        <option value="59">59</option>
                        <option value="60">60</option>
                    </select>
                </div>
            </div>

            <button id="start-quiz-btn" class="bg-purple-500 text-white font-bold rounded-full py-2 px-6 hover:bg-purple-600 transition-colors shadow-lg">
                Start Quiz
            </button>
        </div>
    </div>

    <script>
        const chatMessages = document.getElementById('chat-messages');
        const userInput = document.getElementById('user-input');
        const sendBtn = document.getElementById('send-btn');
        const loadingIndicator = document.getElementById('loading-indicator');
        const fileInput = document.getElementById('file-input');
        const imagePreviewContainer = document.getElementById('image-preview');
        const previewImage = document.getElementById('preview-image');
        const quizSection = document.getElementById('quiz-section');
        const chatSection = document.getElementById('chat-section');
        const chatTab = document.getElementById('chat-tab');
        const quizTab = document.getElementById('quiz-tab');
        const startQuizBtn = document.getElementById('start-quiz-btn');
        const quizDifficultySelect = document.getElementById('quiz-difficulty');
        const quizCountSelect = document.getElementById('quiz-count');
        const quizAgeSelect = document.getElementById('quiz-age');

        let uploadedImageData = null;
        let chatHistory = [];
        let currentQuiz = null;
        let currentQuestionIndex = 0;
        let score = 0;

        // Global variables provided by the Canvas environment
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

        // API Key for Gemini is handled automatically by the environment
        const apiKey = "AIzaSyA1yrsLYAvolioN40SFQBuLTjXswhfJW2I";
        const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

        // Function to show/hide sections
        const showSection = (sectionId) => {
            if (sectionId === 'chat') {
                chatSection.classList.remove('hidden');
                chatSection.classList.add('flex');
                quizSection.classList.add('hidden');
            } else if (sectionId === 'quiz') {
                quizSection.classList.remove('hidden');
                quizSection.classList.add('flex');
                chatSection.classList.add('hidden');
            }
        };

        // Function to create and append a message to the chat
        const appendMessage = (sender, text, sources = [], imageSrc = null) => {
            const messageContainer = document.createElement('div');
            messageContainer.classList.add('flex', 'items-start', 'space-x-3');

            const iconContainer = document.createElement('div');
            iconContainer.classList.add('flex-shrink-0', 'w-8', 'h-8', 'rounded-full', 'flex', 'items-center', 'justify-center');

            if (sender === 'user') {
                iconContainer.innerHTML = `<i class="fas fa-user-circle text-gray-400 text-2xl"></i>`;
                messageContainer.classList.add('flex-row-reverse', 'space-x-reverse');
            } else {
                iconContainer.innerHTML = `<i class="fas fa-robot text-blue-400 text-2xl"></i>`;
            }

            const messageBubble = document.createElement('div');
            messageBubble.classList.add('p-4', 'rounded-lg', 'shadow-md', 'max-w-xl');
            messageBubble.style.backgroundColor = sender === 'user' ? '#4f545c' : '#383a40';
            
            if (imageSrc) {
                const img = document.createElement('img');
                img.src = imageSrc;
                img.classList.add('rounded-lg', 'max-w-full', 'h-auto', 'mb-2');
                messageBubble.appendChild(img);
            }

            const textParagraph = document.createElement('p');
            textParagraph.innerHTML = text;
            messageBubble.appendChild(textParagraph);

            if (sources.length > 0) {
                const sourcesList = document.createElement('div');
                sourcesList.classList.add('mt-2', 'text-xs', 'text-gray-400');
                sourcesList.innerHTML = '<strong>Sources:</strong><ul>' +
                    sources.map(source => `<li><a href="${source.uri}" class="text-blue-300 hover:underline" target="_blank">${source.title}</a></li>`).join('') +
                    '</ul>';
                messageBubble.appendChild(sourcesList);
            }

            messageContainer.appendChild(iconContainer);
            messageContainer.appendChild(messageBubble);

            chatMessages.appendChild(messageContainer);
            chatMessages.scrollTop = chatMessages.scrollHeight; // Scroll to bottom
        };

        // Function to handle sending the message
        const sendMessage = async () => {
            const prompt = userInput.value.trim();
            if (prompt === '' && !uploadedImageData) return;

            // Append user message
            const userImageSrc = uploadedImageData ? previewImage.src : null;
            appendMessage('user', prompt, [], userImageSrc);
            
            // Prepare user's message parts for the API call
            let userMessageParts = [];
            if (prompt) {
                userMessageParts.push({ text: prompt });
            }
            if (uploadedImageData) {
                userMessageParts.push({
                    inlineData: {
                        mimeType: "image/png",
                        data: uploadedImageData
                    }
                });
            }

            // Add user's message to chat history
            chatHistory.push({
                role: "user",
                parts: userMessageParts
            });
            
            // Clear input and disable UI
            userInput.value = '';
            fileInput.value = '';
            uploadedImageData = null;
            imagePreviewContainer.classList.add('hidden');
            
            userInput.disabled = true;
            sendBtn.disabled = true;
            loadingIndicator.classList.remove('hidden');

            try {
                const systemPrompt = "You are the ScienceCord AI. A friendly, knowledgeable assistant for a scientific community. Provide helpful and concise answers, and use Google Search to provide accurate, up-to-date information when needed. Respond in a single paragraph, and avoid conversational filler like 'As an AI...'";
                
                const payload = {
                    contents: chatHistory,
                    systemInstruction: {
                        parts: [{ text: systemPrompt }]
                    },
                };
                
                // Only add the Google Search tool for text-only queries
                if (!uploadedImageData) {
                    payload.tools = [{ "google_search": {} }];
                }
                
                let response;
                let retries = 0;
                const maxRetries = 5;
                
                while (retries < maxRetries) {
                    try {
                        response = await fetch(apiUrl, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(payload)
                        });
                        if (response.status !== 429) break; // Exit loop if not a rate limit error
                        
                        const delay = Math.pow(2, retries) * 1000;
                        await new Promise(res => setTimeout(res, delay));
                        retries++;
                    } catch (err) {
                        retries++;
                        if (retries === maxRetries) throw err;
                    }
                }
                
                if (response.status === 401) {
                    appendMessage('ai', 'Error: The API key is not valid or is missing. If you are running this code outside of the Canvas environment, you may need to provide your own Gemini API key.');
                    return;
                }

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                const candidate = result.candidates?.[0];

                let text = "I'm sorry, I couldn't generate a response. Please try again.";
                let sources = [];
                
                if (candidate && candidate.content?.parts?.[0]?.text) {
                    text = candidate.content.parts[0].text;
                    const groundingMetadata = candidate.groundingMetadata;
                    if (groundingMetadata && groundingMetadata.groundingAttributions) {
                        sources = groundingMetadata.groundingAttributions
                            .map(attribution => ({
                                uri: attribution.web?.uri,
                                title: attribution.web?.title,
                            }))
                            .filter(source => source.uri && source.title);
                    }
                }
                
                // Add AI's message to chat history
                chatHistory.push({
                    role: "model",
                    parts: [{ text: text }]
                });

                appendMessage('ai', text, sources);

            } catch (error) {
                console.error('API call failed:', error);
                appendMessage('ai', 'I am currently unable to process your request. Please check the console for errors.');
            } finally {
                userInput.disabled = false;
                sendBtn.disabled = false;
                loadingIndicator.classList.add('hidden');
                userInput.focus();
            }
        };

        // --- Quiz Logic ---
        const startQuiz = async () => {
            const difficulty = quizDifficultySelect.value;
            const numQuestions = quizCountSelect.value;
            const ageGroup = quizAgeSelect.value;

            quizSection.innerHTML = `
                <div class="text-center text-sm text-gray-400">Generating quiz...</div>
            `;
            
            try {
                const prompt = `Generate a science quiz with ${numQuestions} ${difficulty} multiple-choice questions for ${ageGroup} year olds. Each question should have a question string, an array of 4 options (strings), and a string for the correct answer. The questions should cover general science topics like physics, biology, and chemistry. Ensure the correct answer is one of the options.`;
                
                const payload = {
                    contents: [{
                        parts: [{ text: prompt }]
                    }],
                    generationConfig: {
                        responseMimeType: "application/json",
                        responseSchema: {
                            type: "ARRAY",
                            items: {
                                type: "OBJECT",
                                properties: {
                                    "question": { "type": "STRING" },
                                    "options": {
                                        "type": "ARRAY",
                                        "items": { "type": "STRING" }
                                    },
                                    "correctAnswer": { "type": "STRING" }
                                },
                                "propertyOrdering": ["question", "options", "correctAnswer"]
                            }
                        }
                    }
                };
                
                let response;
                let retries = 0;
                const maxRetries = 5;
                
                while (retries < maxRetries) {
                    try {
                        response = await fetch(apiUrl, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(payload)
                        });
                        if (response.status !== 429) break;
                        const delay = Math.pow(2, retries) * 1000;
                        await new Promise(res => setTimeout(res, delay));
                        retries++;
                    } catch (err) {
                        retries++;
                        if (retries === maxRetries) throw err;
                    }
                }

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                const jsonText = result?.candidates?.[0]?.content?.parts?.[0]?.text;
                currentQuiz = JSON.parse(jsonText);
                currentQuestionIndex = 0;
                score = 0;

                displayQuestion();

            } catch (error) {
                console.error('Quiz generation failed:', error);
                quizSection.innerHTML = `
                    <p class="text-center text-red-400">Failed to generate quiz. Please try again later.</p>
                    <button id="start-quiz-btn" class="mt-4 bg-purple-500 text-white font-bold rounded-full py-2 px-6 hover:bg-purple-600 transition-colors shadow-lg">
                        Start Quiz
                    </button>
                `;
                document.getElementById('start-quiz-btn').addEventListener('click', startQuiz);
            }
        };

        const displayQuestion = () => {
            if (!currentQuiz || currentQuestionIndex >= currentQuiz.length) {
                displayScore();
                return;
            }

            const question = currentQuiz[currentQuestionIndex];
            quizSection.innerHTML = `
                <h3 class="text-lg font-bold mb-4">Question ${currentQuestionIndex + 1} of ${currentQuiz.length}</h3>
                <p class="text-center text-gray-200 mb-6">${question.question}</p>
                <div id="options-container" class="grid grid-cols-1 md:grid-cols-2 gap-4 w-full">
                    ${question.options.map((option, index) => `
                        <button class="option-btn bg-[#40444b] text-gray-200 rounded-lg p-3 hover:bg-[#4f545c] transition-colors" data-answer="${option}">
                            ${String.fromCharCode(65 + index)}. ${option}
                        </button>
                    `).join('')}
                </div>
            `;
            
            document.querySelectorAll('.option-btn').forEach(button => {
                button.addEventListener('click', handleAnswer);
            });
        };

        const handleAnswer = (event) => {
            const selectedAnswer = event.target.getAttribute('data-answer');
            const correctAnswer = currentQuiz[currentQuestionIndex].correctAnswer;
            
            document.querySelectorAll('.option-btn').forEach(button => {
                button.disabled = true;
                if (button.getAttribute('data-answer') === correctAnswer) {
                    button.classList.add('bg-green-600', 'hover:bg-green-600');
                } else if (button.getAttribute('data-answer') === selectedAnswer) {
                    button.classList.add('bg-red-600', 'hover:bg-red-600');
                }
            });

            if (selectedAnswer === correctAnswer) {
                score++;
            }

            setTimeout(() => {
                currentQuestionIndex++;
                displayQuestion();
            }, 1500);
        };

        const displayScore = () => {
            quizSection.innerHTML = `
                <h3 class="text-2xl font-bold mb-4">Quiz Complete!</h3>
                <p class="text-center text-lg text-gray-200 mb-6">You scored ${score} out of ${currentQuiz.length}!</p>
                <button id="play-again-btn" class="bg-purple-500 text-white font-bold rounded-full py-2 px-6 hover:bg-purple-600 transition-colors shadow-lg">
                    Play Again
                </button>
            `;
            document.getElementById('play-again-btn').addEventListener('click', startQuiz);
        };

        // --- Event Listeners ---
        fileInput.addEventListener('change', (event) => {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onloadend = () => {
                    const base64String = reader.result.split(',')[1];
                    uploadedImageData = base64String;
                    previewImage.src = reader.result;
                    imagePreviewContainer.classList.remove('hidden');
                };
                reader.readAsDataURL(file);
            }
        });

        sendBtn.addEventListener('click', sendMessage);
        userInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });
        startQuizBtn.addEventListener('click', startQuiz);
        chatTab.addEventListener('click', () => showSection('chat'));
        quizTab.addEventListener('click', () => showSection('quiz'));
        
        // Initially show the chat section
        showSection('chat');

    </script>
</body>
</html>
